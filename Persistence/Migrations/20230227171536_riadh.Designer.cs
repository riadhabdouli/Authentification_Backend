// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20230227171536_riadh")]
    partial class riadh
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Entities.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "437c07dd-2e04-4779-a547-c891f929f078",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "d65e4896-c3ba-4171-b845-d31cf19c46b5",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88ecec39-c9c9-49a1-841c-24f808f75dbd",
                            Email = "enes@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Enes",
                            LastName = "Ozmus",
                            LockoutEnabled = false,
                            NormalizedEmail = " ENES@SEEDDATA.COM",
                            NormalizedUserName = "ENESOZMUS",
                            PasswordHash = "AQAAAAEAACcQAAAAEFORh2iauVh0BkTS8epfI05UcXqQX+5g49tq8mtjn/7/LcvdoS732r6mA19sUdp5Qw==",
                            PhoneNumber = "0541 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "eec24e80-e320-497b-9e2a-28e293fea32a",
                            TwoFactorEnabled = false,
                            UserName = "enesozmus"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22ddc840-0f45-40f4-833c-22f6ed739f4d",
                            Email = "umay@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Umay",
                            LastName = "Zengin",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMAY@SEEDDATA.COM",
                            NormalizedUserName = "UMAYZENGIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEMYBlBiHijmwXcQqz6+FqhvPYMgDdtOoIvSSCTNeUosU/+izM/cehA6kC11XIvAeTA==",
                            PhoneNumber = "0542 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ba2fac79-eb0c-422f-a65f-d5b30e72dd3b",
                            TwoFactorEnabled = false,
                            UserName = "umayzengin"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1938a2de-c910-4d95-9a1a-0084bce8a7ae",
                            Email = "selim@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Selim",
                            LastName = "Karaca",
                            LockoutEnabled = false,
                            NormalizedEmail = "SELIM@SEEDDATA.COM",
                            NormalizedUserName = "SELIMKARACA",
                            PasswordHash = "AQAAAAEAACcQAAAAENbSjtj8Va0N5tlIybfTLFlbrZeVfN5RLPYXm0mCdo5q/pAJQ+y/tj+ByUSx+TLRnA==",
                            PhoneNumber = "0543 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86684137-58e7-46df-a5c3-fdde2084b93a",
                            TwoFactorEnabled = false,
                            UserName = "selimkaraca"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e3f4d4ef-5354-4408-8cfb-12a3102a19e2",
                            Email = "emine@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Emine",
                            LastName = "Yıldırım",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMINE@SEEDDATA.COM",
                            NormalizedUserName = "EMINEYILDIRIM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB7g0hKSOvLu92oxKnEkzppwqFJqs492ctMUbI9sDCIoDlWL3SbQJ115It0iX7G75g==",
                            PhoneNumber = "0544 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc3342dd-9d91-4da9-a3a8-e23216e873ec",
                            TwoFactorEnabled = false,
                            UserName = "emineyıldırım"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "716b2659-834f-4ff4-9482-3da5b4ec60b4",
                            Email = "ihsan@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "İhsan",
                            LastName = "Yenilmez",
                            LockoutEnabled = false,
                            NormalizedEmail = "IHSAN@SEEDDATA.COM",
                            NormalizedUserName = "IHSANYENILMEZ",
                            PasswordHash = "AQAAAAEAACcQAAAAELLQkiUD/L9vZ2XtDva8exBmUxLRQR4gf5G1tS4+3wAKdqf2Xyb0/LQVaT2FJWm37Q==",
                            PhoneNumber = "0545 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9bcde65-17f4-443c-a5d2-2496b65aa6ee",
                            TwoFactorEnabled = false,
                            UserName = "ihsanyenilmez"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48bbaf9b-4287-4d79-90ea-6937fe5bbfcc",
                            Email = "berrin@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Berrin",
                            LastName = "Miral",
                            LockoutEnabled = false,
                            NormalizedEmail = "BERRIN@SEEDDATA.COM",
                            NormalizedUserName = "BERRINMIRAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHEP3DyFo1fdH6Edm7XU9+SuTdoHgmgrWLO+iGYkhhNVnMlJSubGp8SPfkVFe0mG4w==",
                            PhoneNumber = "0546 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "56dd15e6-252a-49f9-b221-d3e2f58f9d39",
                            TwoFactorEnabled = false,
                            UserName = "berrinmiral"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2627adf0-7f21-44d8-bca6-d1f2698a14fb",
                            Email = "salih@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Salih",
                            LastName = "Yurdakul",
                            LockoutEnabled = false,
                            NormalizedEmail = "SALIH@SEEDDATA.COM",
                            NormalizedUserName = "SALIHYURDAKUL",
                            PasswordHash = "AQAAAAEAACcQAAAAEC58XM6neVS0kBjuX+Bv0cCARrjHf3szODg+NTVJxy3/0qA0b86aeA57n88rBi/qiw==",
                            PhoneNumber = "0547 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "802e2bc4-0266-41d5-b994-0d5d54758919",
                            TwoFactorEnabled = false,
                            UserName = "salihyurdakul"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8700327-77a3-4537-8854-384ee783f2b7",
                            Email = "zafer@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Zafer",
                            LastName = "Kırat",
                            LockoutEnabled = false,
                            NormalizedEmail = "ZAFER@SEEDDATA.COM",
                            NormalizedUserName = "ZAFERKIRAT",
                            PasswordHash = "AQAAAAEAACcQAAAAEFdV1LIW83A8kGpiRhvoDGu30T8dt8JAkOn7/ci6om9VO9tJo9IdvXA5ljF0F8mVcg==",
                            PhoneNumber = "0548 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9660e8df-e6bc-4262-98b3-9c457a76c064",
                            TwoFactorEnabled = false,
                            UserName = "zaferkırat"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cc64bed8-1f57-414b-adac-5019d281aeda",
                            Email = "emre@seeddata.com",
                            EmailConfirmed = true,
                            FirstName = "Emre",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMRE@SEEDDATA.COM",
                            NormalizedUserName = "EMREDEMIR",
                            PasswordHash = "AQAAAAEAACcQAAAAEIFiOYIp/D+eiSSLhtyg3XUSDFPZ+wH90a0JbapZo67l8TxKa8aNIpX8ViHWbBghOQ==",
                            PhoneNumber = "0549 555 ####",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5a037ac-8f72-4a5d-8415-32404f49cb32",
                            TwoFactorEnabled = false,
                            UserName = "emredemir"
                        });
                });

            modelBuilder.Entity("Domain.Entities.BaseFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseFiles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseFile");
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Domain.Entities.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCWAIKIKI"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCWAIKIKI Limited"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCWAIKIKI Modest"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCWAIKIKI Casual"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LCWAIKIKI Vision"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MIZALLE"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BENETTON"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BIANCA"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "QOOQ STORE"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mont"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hırka ve Süveter"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kazak"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bluz"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gömlek"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tişört"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sweatshirt"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jean"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ekru"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kırmızı"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Lacivert"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Açık Kahverengi"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mavi"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Antrasit"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Koyu Gri"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Canlı Turuncu"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bej Çizgili"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Beyaz"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Gri"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "İndigo Melanj"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Koyu Rodeo"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Optik Beyaz"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OfferPrice")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AppUserId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsOfferable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSold")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("SizeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppUserId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Dik Yaka Erkek Deri Mont",
                            Price = 2699.99f,
                            SizeId = 1,
                            Stock = 400
                        },
                        new
                        {
                            Id = 2,
                            AppUserId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 2,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Biker Yaka Erkek Deri Mont",
                            Price = 2699.99f,
                            SizeId = 1,
                            Stock = 400
                        },
                        new
                        {
                            Id = 3,
                            AppUserId = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ColorId = 3,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Gömlek Yaka Erkek Şişme Mont",
                            Price = 2699.99f,
                            SizeId = 1,
                            Stock = 400
                        },
                        new
                        {
                            Id = 4,
                            AppUserId = 1,
                            BrandId = 4,
                            CategoryId = 2,
                            ColorId = 4,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Kuşak Detaylı Uzun Kollu Kadın Triko Hırka",
                            Price = 499.99f,
                            SizeId = 2,
                            Stock = 400
                        },
                        new
                        {
                            Id = 5,
                            AppUserId = 2,
                            BrandId = 5,
                            CategoryId = 2,
                            ColorId = 5,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Kapüşonlu Kendinden Desenli Kadın Süveter",
                            Price = 189.99f,
                            SizeId = 3,
                            Stock = 400
                        },
                        new
                        {
                            Id = 6,
                            AppUserId = 2,
                            BrandId = 6,
                            CategoryId = 3,
                            ColorId = 6,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Balıkçı Yaka Uzun Kollu Erkek Triko Kazak",
                            Price = 79.99f,
                            SizeId = 3,
                            Stock = 400
                        },
                        new
                        {
                            Id = 7,
                            AppUserId = 2,
                            BrandId = 7,
                            CategoryId = 3,
                            ColorId = 7,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Uzun Kollu Çizgili Erkek Triko Kazak",
                            Price = 149.99f,
                            SizeId = 4,
                            Stock = 400
                        },
                        new
                        {
                            Id = 8,
                            AppUserId = 2,
                            BrandId = 8,
                            CategoryId = 4,
                            ColorId = 8,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = false,
                            IsSold = false,
                            Name = "Kalp Yaka Kolsız Kadın Blız",
                            Price = 449.99f,
                            SizeId = 4,
                            Stock = 400
                        },
                        new
                        {
                            Id = 9,
                            AppUserId = 3,
                            BrandId = 9,
                            CategoryId = 4,
                            ColorId = 9,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = true,
                            Name = "Renk Bloklu Uzun Kollu Kadın Bluz",
                            Price = 599.99f,
                            SizeId = 5,
                            Stock = 400
                        },
                        new
                        {
                            Id = 10,
                            AppUserId = 3,
                            BrandId = 1,
                            CategoryId = 5,
                            ColorId = 10,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Uzun Kollu Poplin Erkek Gömlek",
                            Price = 349.99f,
                            SizeId = 5,
                            Stock = 400
                        },
                        new
                        {
                            Id = 11,
                            AppUserId = 3,
                            BrandId = 2,
                            CategoryId = 5,
                            ColorId = 11,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Uzun Kollu Keten Erkek Gömlek",
                            Price = 349.99f,
                            SizeId = 6,
                            Stock = 400
                        },
                        new
                        {
                            Id = 12,
                            AppUserId = 3,
                            BrandId = 3,
                            CategoryId = 6,
                            ColorId = 12,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = false,
                            IsSold = false,
                            Name = "Tül Detaylı Kadın Lima Tişört",
                            Price = 199.99f,
                            SizeId = 6,
                            Stock = 400
                        },
                        new
                        {
                            Id = 13,
                            AppUserId = 4,
                            BrandId = 4,
                            CategoryId = 6,
                            ColorId = 13,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Bisiklet Yaka Baskılı Kadın Tişört",
                            Price = 199.99f,
                            SizeId = 7,
                            Stock = 400
                        },
                        new
                        {
                            Id = 14,
                            AppUserId = 5,
                            BrandId = 5,
                            CategoryId = 7,
                            ColorId = 14,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Baskılı Erkek Sweatshirt",
                            Price = 299.99f,
                            SizeId = 7,
                            Stock = 400
                        },
                        new
                        {
                            Id = 15,
                            AppUserId = 6,
                            BrandId = 6,
                            CategoryId = 7,
                            ColorId = 11,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = true,
                            Name = "Outdoor Kapüşonlu Erkek Sweatshirt",
                            Price = 269.99f,
                            SizeId = 1,
                            Stock = 400
                        },
                        new
                        {
                            Id = 16,
                            AppUserId = 7,
                            BrandId = 7,
                            CategoryId = 8,
                            ColorId = 12,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = false,
                            Name = "Tül Kemer Detaylı Kadın Jean",
                            Price = 349.99f,
                            SizeId = 1,
                            Stock = 400
                        },
                        new
                        {
                            Id = 17,
                            AppUserId = 8,
                            BrandId = 8,
                            CategoryId = 8,
                            ColorId = 10,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsOfferable = true,
                            IsSold = true,
                            Name = "Cepli Kadın Flare Jean",
                            Price = 269.99f,
                            SizeId = 2,
                            Stock = 400
                        });
                });

            modelBuilder.Entity("Domain.Entities.Product_Order", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("Products_Orders");
                });

            modelBuilder.Entity("Domain.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "XS"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "S"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "M"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "L"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "XL"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "2XL"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2022, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "3XL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.Property<int>("ProductImageFilesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("ProductImageFilesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductProductImageFile");
                });

            modelBuilder.Entity("Domain.Entities.InvoiceFile", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFile");

                    b.Property<decimal>("Price")
                        .HasPrecision(14, 2)
                        .HasColumnType("decimal(14,2)");

                    b.HasDiscriminator().HasValue("InvoiceFile");
                });

            modelBuilder.Entity("Domain.Entities.ProductImageFile", b =>
                {
                    b.HasBaseType("Domain.Entities.BaseFile");

                    b.Property<bool>("Showcase")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("ProductImageFile");
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "AppUser")
                        .WithMany("Baskets")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Domain.Entities.BasketItem", b =>
                {
                    b.HasOne("Domain.Entities.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Offer", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "AppUser")
                        .WithMany("Offers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Basket", "Basket")
                        .WithOne("Order")
                        .HasForeignKey("Domain.Entities.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", "AppUser")
                        .WithMany("Products")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Domain.Entities.Product_Order", b =>
                {
                    b.HasOne("Domain.Entities.Order", "Order")
                        .WithMany("Products_Orders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", "Product")
                        .WithMany("Products_Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Domain.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductProductImageFile", b =>
                {
                    b.HasOne("Domain.Entities.ProductImageFile", null)
                        .WithMany()
                        .HasForeignKey("ProductImageFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Offers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Basket", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Navigation("Products_Orders");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("Offers");

                    b.Navigation("Products_Orders");
                });

            modelBuilder.Entity("Domain.Entities.Size", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
